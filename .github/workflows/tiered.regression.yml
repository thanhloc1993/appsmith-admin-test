name: tiered.regression

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - uat
      organization:
        description: "Organization"
        required: true
        default: "manabie"
        type: choice
        options:
          - manabie
          - jprep

      fe-release-branch:
        description: "FE release branch. Leave empty to run on host."
        required: false

      me-release-branch:
        description: "ME release branch. Leave empty to run on host."
        required: false

      tags:
        description: "The tags the trigger e2e, please it empty if you want to run all: Eg: @lesson and (@syllabus or @communication)"
        required: false
        default: ""

      group:
        description: "Group on squad-tags files"
        required: false
        default: ""

  schedule:
    - cron: "00 15 * * *" #10:00PM GMT+7 communication
    - cron: "10 15 * * 0" #10:10PM GMT+7 every Sunday platform
    - cron: "00 16 * * *" #11:00PM GMT+7 architecture
    - cron: "00 17 * * *" #0:00AM GMT+7 syllabus-1
    - cron: "00 18 * * *" #1:00AM GMT+7 syllabus-2
    - cron: "00 19 * * *" #2:00AM GMT+7 calendar
    - cron: "00 20 * * *" #3:00AM GMT+7 user
    - cron: "00 21 * * 1" #4:00AM GMT+7 every Monday timesheet-weekly
    - cron: "30 21 * * *" #4:30AM GMT+7 timesheet
    - cron: "00 22 * * *" #5:00AM GMT+7 virtual-classroom
    - cron: "00 23 * * *" #6:00AM GMT+7 adobo
    - cron: "00 00 * * *" #7:00AM GMT+7 lesson

env:
  CI: true
  GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}

  REPORT_URL: "https://mana-e2e.web.app/"
  BUCKET_NAME: "eibanam-2"
  GOOGLE_IDENTITY_AUTH_DOMAIN: "staging-manabie-online.firebaseapp.com"
  GOOGLE_PROJECT_ID: "staging-manabie-online"
  REPORT_GRAPHQL_URL: "https://admin.staging-green.manabie.io/draft/v1/graphql"

  ENV: "${{ github.event.inputs.environment }}"

  EIBANAM_REF: ${{ github.ref }}
  TAGS: ${{ github.event.inputs.tags }}
  ORGANIZATION: ${{ github.event.inputs.organization }}

  ACTOR: ${{ github.actor }}
  ACTOR_ICON: ${{ github.event.sender.avatar_url }}

  FE_REF: ${{ github.event.inputs.fe-release-branch }}
  ME_REF: ${{ github.event.inputs.me-release-branch }}

  RUN_ID: ${{ github.run_id }}
  PUBLISH: true

permissions:
  contents: "read"
  id-token: "write"

jobs:
  runners:
    runs-on: ["self-hosted", "60m-240mi", "spot", "persistent"]
    outputs:
      runners: ${{ steps.runners.outputs.runners }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop #should be develop
          repository: manabie-com/backend
          token: ${{ secrets.BUILD_GITHUB_TOKEN }}

      - id: runners
        uses: ./.github/actions/runners
        with:
          repo: "eibanam"
          workflow: "tiered.regression"

  prepare-feature-tags:
    runs-on: ["self-hosted", "60m-240mi", "spot", "persistent"]
    outputs:
      get-feature-flag: ${{ steps.split-feature-tags.outputs.result }}
      get-ref-in-week: ${{ steps.get-ref-in-week.outputs.result }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.EIBANAM_REF }}

      - name: get-ref-in-week
        id: get-ref-in-week
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BUILD_GITHUB_TOKEN }}
          script: |
            const { getRefInWeek } = require('${{github.workspace}}/scripts/get-ref-in-week.js');

            return await getRefInWeek({
              context,
              core,
            });

      - uses: actions/github-script@v6
        id: split-feature-tags
        name: split-feature-tags
        env:
          CRON_TIME: "${{ github.event.schedule }}"
          GROUP: "${{ inputs.group }}"
        with:
          script: |
            const { splitFeatureTags } = require('${{github.workspace}}/scripts/split-feature-tags.js');
            const data = await splitFeatureTags({ chunk: 1 });
            const {results: runners, tagExpression} = data;

            console.log("===tagExpression", tagExpression)
            console.log("===runners", runners)
            return {runners, tagExpression};

  run-e2e:
    needs: [prepare-feature-tags, runners]
    runs-on: ${{ fromJson(needs.runners.outputs.runners)['run-e2e'] }}
    strategy:
      matrix:
        runners: ${{ fromJson(needs.prepare-feature-tags.outputs.get-feature-flag).runners }}
      fail-fast: false
    steps:
      - uses: manabie-com/workflow-telemetry-action@v1
        continue-on-error: true
        with:
          comment_on_pr: false

      - uses: actions/checkout@v3
      - name: run-e2e
        uses: ./.github/actions/reuse.e2e
        timeout-minutes: 180
        with:
          TAGS: "${{ matrix.runners.tagString }}"
          SQUADS: "${{ matrix.runners.squad }}"
          ORGANIZATION: "${{ matrix.runners.organization }}"
          EIBANAM_REF: "${{ fromJson(needs.prepare-feature-tags.outputs.get-ref-in-week).EIBANAM_REF }}"
          ENV: "${{ fromJson(needs.prepare-feature-tags.outputs.get-ref-in-week).ENV }}"
          FE_REF: ${{ github.event.inputs.fe-release-branch }}
          ME_REF: ${{ github.event.inputs.me-release-branch }}
          DURATION_LIMIT: 1800000 #30 mins
          RUN_ID: ${{ github.run_id }}
          REPO: "eibanam"

          GCR_JSON_KEY: ${{ secrets.GCR_JSON_KEY }}
          BUILD_GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
          OTLP_ACCESS_TOKEN: ${{ secrets.OTLP_ACCESS_TOKEN }}
          REPORT_HASURA_SECRET: ${{ secrets.REPORT_HASURA_SECRET }}
          UNLEASH_CLIENT_KEY: ${{ secrets.UNLEASH_CLIENT_KEY }}
          UNLEASH_CREDENTIAL: ${{ secrets.UNLEASH_CREDENTIAL }}

      - name: cleanup cucumber #because we can't add timeout in composite action
        if: always()
        timeout-minutes: 5
        run: |
          ./scripts/docker-compose.sh web_profile
        shell: bash

  notify:
    needs: [run-e2e, prepare-feature-tags]
    runs-on: ["self-hosted", "60m-240mi", "spot", "persistent"]
    if: ${{ !cancelled() }}
    steps:
      - uses: actions/checkout@master

      - id: get-info-squad-before-send-noti
        uses: actions/github-script@v6
        env:
          E2E_SLACK_WEBHOOKS: ${{ secrets.E2E_SLACK_WEBHOOKS }}
          INFO: ${{ needs.prepare-feature-tags.outputs.get-feature-flag }}
          STATUS: ${{ needs.run-e2e.result }}
        with:
          script: |
            const info = JSON.parse(process.env.INFO);
            core.exportVariable('TAG_EXPRESSION', info.tagExpression);
            const { notifyMessage } = require('${{github.workspace}}/scripts/prepare-message-notify.js');

            await notifyMessage({runners: info.runners, core, context})

      - name: Slack Notification
        uses: tokorom/action-slack-incoming-webhook@main
        with:
          text: ${{ env.TITLE }}
          attachments: ${{ env.BODY }}
