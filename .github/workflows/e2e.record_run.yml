name: e2e.trigger

on:
  pull_request:
    types: [labeled]

  repository_dispatch:
    types: [minimal-running]

concurrency:
  group: e2e.record_run-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: "read"
  id-token: "write"

env:
  CI: true
  RUN_ID: ${{ github.run_id }}
  ACTOR: ${{ github.actor }}

  EIBANAM_REPO: eibanam
  FE_REPO: school-portal-admin
  ME_REPO: student-app

  GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
  UNLEASH_CLIENT_KEY: ${{ secrets.UNLEASH_CLIENT_KEY }}

  REPORT_URL: "https://mana-e2e.web.app/"
  REPORT_HASURA_SECRET: ${{ secrets.REPORT_HASURA_SECRET }}
  BUCKET_NAME: "eibanam-2"
  GOOGLE_IDENTITY_AUTH_DOMAIN: "staging-manabie-online.firebaseapp.com"
  GOOGLE_PROJECT_ID: "staging-manabie-online"
  REPORT_GRAPHQL_URL: "https://admin.staging-green.manabie.io/draft/v1/graphql"

  # This one for login to unleash admin when run e2e test
  UNLEASH_CREDENTIAL: "${{secrets.UNLEASH_CREDENTIAL}}"

jobs:
  runners:
    runs-on: ['self-hosted', '60m-240mi', 'spot', 'persistent']
    outputs:
      runners: ${{ steps.runners.outputs.runners }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop #should be develop
          repository: manabie-com/backend
          token: ${{ secrets.BUILD_GITHUB_TOKEN }}

      - id: runners
        uses: ./.github/actions/runners
        with:
          repo: 'eibanam'
          workflow: 'e2e.record_run'

  pr-description:
    if: ${{ contains(github.event.label.name, 'Trigger record test') }}
    outputs:
      pullNumber: ${{ steps.pr-description.outputs.pullNumber }}
      owner: ${{ steps.pr-description.outputs.owner }}
      repo: ${{ steps.pr-description.outputs.repo }}
      tags: ${{ steps.pr-description.outputs.tags }}
      featureFiles: ${{ steps.pr-description.outputs.featureFiles }}
      eibanamRef: ${{ steps.pr-description.outputs.eibanamRef }}
      meRef: ${{ steps.pr-description.outputs.meRef }}
      environment: ${{ steps.pr-description.outputs.environment }}
      organization: ${{ steps.pr-description.outputs.organization }}
    runs-on: ['self-hosted', '60m-240mi', 'spot', 'persistent']
    steps:
      - uses: actions/checkout@v3

      - id: pr-description
        uses: ./.github/actions/reuse.pr-description
        with:
          BUILD_GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}

  run-e2e:
    needs: [pr-description, runners]
    runs-on: ${{ fromJson(needs.runners.outputs.runners)['run-e2e'] }}
    strategy:
      fail-fast: false
      matrix:
        name: ["@extra-tests"]
        include:
          - name: "@extra-tests"
            tags: "${{ needs.pr-description.outputs.tags }}"
            featureFiles: "${{ needs.pr-description.outputs.featureFiles }}"
            environment: "${{ needs.pr-description.outputs.environment }}"
            organization: "${{ needs.pr-description.outputs.organization }}"
            fe_ref: "${{ needs.pr-description.outputs.feRef }}"
            me_ref: "${{ needs.pr-description.outputs.meRef }}"
            skip: ${{ needs.pr-description.outputs.tags == '' && needs.pr-description.outputs.featureFiles == '' }}
    steps:
      - uses: actions/checkout@v3
        if: matrix.skip != true

      - name: run-e2e
        if: matrix.skip != true
        uses: ./.github/actions/reuse.recorder
        timeout-minutes: 15
        with:
          EIBANAM_REF: "${{ needs.pr-description.outputs.eibanamRef }}"
          FE_REF: "${{ matrix.fe_ref }}"
          ME_REF: "${{ matrix.me_ref }}"
          TAGS: "${{ matrix.tags }}"
          FEATURE_FILES: "${{ matrix.featureFiles }}"
          ENV: ${{ matrix.environment }}
          ORGANIZATION: ${{ matrix.organization }}
          DURATION_LIMIT: 3000000 # 50 mins
          RUN_ID: ${{ github.run_id }}

          REPO: "${{ needs.pr-description.outputs.repo }}"
          OWNER: "${{ needs.pr-description.outputs.owner }}"
          ISSUE_NUMBER: "${{ needs.pr-description.outputs.pullNumber }}"

          GCR_JSON_KEY: ${{ secrets.GCR_JSON_KEY }}
          BUILD_GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
          OTLP_ACCESS_TOKEN: ${{ secrets.OTLP_ACCESS_TOKEN }}
          REPORT_HASURA_SECRET: ${{ secrets.REPORT_HASURA_SECRET }}
          UNLEASH_CLIENT_KEY: ${{ secrets.UNLEASH_CLIENT_KEY }}
          UNLEASH_CREDENTIAL: ${{ secrets.UNLEASH_CREDENTIAL }}
          FAIL_FAST: false